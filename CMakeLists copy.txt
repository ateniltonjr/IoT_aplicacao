# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.1)
set(toolchainVersion 14_2_Rel1)
set(picotoolVersion 2.1.1)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================
# Versão mínima do CMake necessária
cmake_minimum_required(VERSION 3.13)

# Definição dos padrões de linguagem
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Configuração do ambiente para o Raspberry Pi Pico
if(WIN64)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()

# Inclusão do arquivo de configuração do VS Code (se existir)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()

# Definição da placa (Pico W com Wi-Fi)
set(PICO_BOARD pico_w CACHE STRING "Board type")

# Inclusão do SDK do Raspberry Pi Pico
include(pico_sdk_import.cmake)

# Definição do projeto
project(proj_wifi C CXX ASM)

# Inicialização do SDK
pico_sdk_init()

# Adição dos arquivos fonte
add_executable(proj_wifi 
    proj_wifi.c
    C/rgb.c
    C/matrixws.c
    C/ssd1306.c
    C/handlers.c
    C/handlers_matriz.c
    C/handlers_cores.c
    C/handlers_led.c
    C/handlers_notas.c
    C/matriz_numbers.c
    C/matriz_cores.c
)

# Configuração do nome e versão do programa
pico_set_program_name(proj_wifi "proj_wifi")
pico_set_program_version(proj_wifi "0.1")

# Configuração da saída padrão (USB habilitado, UART desabilitado)
pico_enable_stdio_uart(proj_wifi 0)
pico_enable_stdio_usb(proj_wifi 1)

# Vinculação das bibliotecas necessárias
target_link_libraries(proj_wifi
    pico_stdlib
    pico_cyw43_arch_lwip_threadsafe_background
    hardware_gpio  # Adicione outras bibliotecas conforme necessário
    hardware_i2c
)

# Inclusão de diretórios de cabeçalhos
target_include_directories(proj_wifi PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}
)

# Geração de arquivos adicionais (.uf2, .hex, etc.)
pico_add_extra_outputs(proj_wifi)